apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    argocd.argoproj.io/tracking-id: serviceexample:apps/Deployment:default/serviceexample
    deployment.kubernetes.io/revision: "12"
    kubectl.kubernetes.io/last-applied-configuration: |
      {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{"argocd.argoproj.io/tracking-id":"serviceexample:apps/Deployment:default/serviceexample"},"labels":{"app.kubernetes.io/instance":"serviceexample","app.kubernetes.io/managed-by":"Helm","app.kubernetes.io/name":"serviceexample","app.kubernetes.io/version":"1.0.0","helm.sh/chart":"serviceexample-0.1.0"},"name":"serviceexample","namespace":"default"},"spec":{"replicas":1,"selector":{"matchLabels":{"app.kubernetes.io/instance":"serviceexample","app.kubernetes.io/name":"serviceexample"}},"template":{"metadata":{"labels":{"app.kubernetes.io/instance":"serviceexample","app.kubernetes.io/name":"serviceexample"}},"spec":{"containers":[{"env":[{"name":"ASPNETCORE_ENVIRONMENT","value":"Production"},{"name":"Aspire__MongoDB__Driver__ConnectionString","value":"mongodb://mongo:27017"},{"name":"Aspire__StackExchange__Redis__ConnectionString","value":"redis:6379"},{"name":"Aspire__NATS__Net__ConnectionString","value":"nats://serviceexample-nats:4222"}],"image":"serviceexampleacr.azurecr.io/serviceexample:latest","imagePullPolicy":"IfNotPresent","livenessProbe":{"httpGet":{"path":"/","port":"http"},"initialDelaySeconds":10,"periodSeconds":10},"name":"serviceexample","ports":[{"containerPort":9080,"name":"http","protocol":"TCP"}],"readinessProbe":{"httpGet":{"path":"/","port":"http"},"initialDelaySeconds":5,"periodSeconds":5},"resources":{"limits":{"cpu":"500m","memory":"512Mi"},"requests":{"cpu":"250m","memory":"256Mi"}}}],"imagePullSecrets":[{"name":"acr-secret"}]}}}}
  creationTimestamp: "2025-10-10T08:45:32Z"
  generation: 14
  labels:
    app.kubernetes.io/instance: serviceexample
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: serviceexample
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: serviceexample-0.1.0
  name: serviceexample
  namespace: default
  resourceVersion: "58459"
  uid: d58cb5ee-b978-4080-a3ca-facc5db8fc94
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/instance: serviceexample
      app.kubernetes.io/name: serviceexample
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/restartedAt: "2025-10-10T11:59:55+03:00"
      labels:
        app.kubernetes.io/instance: serviceexample
        app.kubernetes.io/name: serviceexample
    spec:
      containers:
      - env:
        - name: ASPNETCORE_ENVIRONMENT
          value: Production
        - name: Aspire__MongoDB__Driver__ConnectionString
          value: mongodb://admin:$(MONGODB_PASSWORD)@serviceexample-mongodb:27017/serviceexample
        - name: MONGODB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mongodb-auth
              key: password
        - name: Aspire__StackExchange__Redis__ConnectionString
          value: $(REDIS_PASSWORD)@serviceexample-redis:6379
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-auth
              key: password
        - name: Aspire__NATS__Net__ConnectionString
          value: nats://serviceexample-nats:4222
        image: serviceexampleacr.azurecr.io/serviceexample:latest
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /
            port: http
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        name: serviceexample
        ports:
        - containerPort: 9080
          name: http
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /
            port: http
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 1
        resources:
          limits:
            cpu: 500m
            memory: 512Mi
          requests:
            cpu: 250m
            memory: 256Mi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      imagePullSecrets:
      - name: acr-secret
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
status:
  conditions:
  - lastTransitionTime: "2025-10-10T08:50:56Z"
    lastUpdateTime: "2025-10-10T08:50:56Z"
    message: Deployment does not have minimum availability.
    reason: MinimumReplicasUnavailable
    status: "False"
    type: Available
  - lastTransitionTime: "2025-10-10T09:18:31Z"
    lastUpdateTime: "2025-10-10T09:18:31Z"
    message: ReplicaSet "serviceexample-5f57cd984b" has timed out progressing.
    reason: ProgressDeadlineExceeded
    status: "False"
    type: Progressing
  observedGeneration: 14
  replicas: 2
  unavailableReplicas: 2
  updatedReplicas: 1
