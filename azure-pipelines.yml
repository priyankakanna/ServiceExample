trigger:
  branches:
    include:
      - main

variables:
  IMAGE_NAME: 'serviceexample'
  TAG: '$(Build.BuildId)'
  LATEST_TAG: 'latest'
  # Add build context to optimize caching
  BUILD_CONTEXT: 'ServiceExample'

stages:
  - stage: BuildAndPush
    displayName: "Build, Test, and Push Docker Image"
    jobs:
      - job: Build
        pool:
          name: SelfHostedPool
        steps:
          # 1️⃣ Checkout source code
          - checkout: self
            displayName: 'Checkout source code'

          # 2️⃣ Install .NET SDK (move before cache for better performance)
          - task: UseDotNet@2
            inputs:
              packageType: 'sdk'
              version: '9.0.x'
            displayName: 'Install .NET SDK 9.0.x'

          # 3️⃣ Cache NuGet packages
          - task: Cache@2
            inputs:
              key: 'nuget | "$(Agent.OS)" | **/*.csproj | **/global.json'
              restoreKeys: |
                nuget | "$(Agent.OS)"
              path: ~/.nuget/packages
            displayName: 'Cache NuGet packages'

          # 4️⃣ Restore dependencies
          - script: |
              dotnet restore --verbosity minimal
            displayName: 'Restore .NET Dependencies'

          # 5️⃣ Build project
          - script: |
              dotnet build ServiceExample/ServiceExample.csproj -c Release --no-restore
            displayName: 'Build Project'

          # 6️⃣ Run Unit Tests
          - script: |
              dotnet test UnitTests/UnitTests.csproj --configuration Release --no-build --verbosity minimal
            displayName: 'Run Unit Tests'

          # 7️⃣ Docker login (OPTIMIZED - combined with build)
          - task: Docker@2
            displayName: 'Login to ACR'
            inputs:
              containerRegistry: 'serviceexampleacr'
              command: login
            # Remove verbose logging in production

          # 8️⃣ Docker build and push in one task (MOST IMPORTANT OPTIMIZATION)
          - task: Docker@2
            displayName: 'Build and Push Docker Image'
            inputs:
              command: buildAndPush
              containerRegistry: 'serviceexampleacr'
              repository: '$(IMAGE_NAME)'
              dockerfile: 'Dockerfile'
              buildContext: '$(BUILD_CONTEXT)'
              tags: |
                $(TAG)
                $(LATEST_TAG)
              arguments: '--cache-from $(IMAGE_NAME):latest --pull'
